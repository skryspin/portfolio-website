{"ast":null,"code":"var _jsxFileName = \"/Users/sarahkryspin/portfolio_website/my-website/src/Practice.js\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\nimport React from 'react';\nimport './App.css'; //A Function component accepts properties and returns a React element\n//NOTE: Always start component names with a capital letter\n//NOTE: Props are read-only: never modify props\n//NOTE: Use STATE to modify stuff\n//NOTE: There are three things you should know about setState()\n// 1) Do Not Modify State directly\n//\n// Wrong\n// this.state.comment = 'Hello';\n//\n//correct\n//this.setState({comment: 'Hello'});\n//\n// The only place where you can assign this.state is the constructor\n//\n// ---- States may be updated Asynchronously ---\n//\n// WRONG\n// this.setState({\n//    counter: this.state.counter + this.props.increment,\n// })/\n//\n// CORRECT\n// this.setState((state, props) => ({\n//      counter: state.counter + props.increment\n//}))/\n//\n// ---- State updates are Merged ----\n// When you call setState(), React merges the object you provide into the current state\n//\n//For example, your state may contain several independent variables:\n//  constructor(props) {\n//   super(props);\n//   this.state = {\n//     posts: [],\n//     comments: []\n//   };\n// }\n//Then you can update them independently with separate setState() calls:\n//  componentDidMount() {\n//   fetchPosts().then(response => {\n//     this.setState({\n//       posts: response.posts\n//     });\n//   });\n//\n//   fetchComments().then(response => {\n//     this.setState({\n//       comments: response.comments\n//     });\n//   });\n// }\n// --- The Data Flows Down---\n// Any state is always owned by some specific component, and any data derived from that state can only affect components \"below\" them in the tree\n\nfunction Practice(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Clock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Clock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Clock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Toggle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Greeting, {\n    isLoggedIn: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isToggleOn: true,\n      id: 0\n    }; // This binding is necessary to make 'this' work in the callback\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(id) {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn,\n      id: state.id + 1\n    }));\n  } // if you refer to a method without () after it, you should bind that method\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, this.state.isToggleOn ? 'ON' : 'OFF', \"Count: \", this.state.id);\n  }\n\n}\n\nfunction UserGreeting(props) {\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 10\n    }\n  }, \"Welcome back!\");\n}\n\nfunction GuestGreeting(props) {\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }, \"Please sign up.\");\n}\n\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n\n  if (isLoggedIn) {\n    return UserGreeting();\n  } else {\n    return GuestGreeting();\n  }\n} //A fine component that doesn't modify the properties\n// function Clock(props) {\n//   return (\n//     <div>\n//       <h1>Hello, World</h1>\n//       <h2>It is {props.date.toLocaleTimeString()}.</h2>\n//     </div>\n//   )\n// }\n\n\nfunction Welcome(props) {\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, \" Hello, \", props.name);\n}\n\nconst element = /*#__PURE__*/React.createElement(Welcome, {\n  name: \"Seb\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 17\n  }\n}); //The Clock, but as a class so we can use state\n\nclass Clock extends React.Component {\n  //#1 React calls the constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n  } //#3 Runs after the component output has been rendered to the DOM\n\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  } //#5 if the Clock component is removed from the DOM, this stops the timer\n\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  } //#4 Every second, tick() is run\n\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  } //#2 React calls render\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, \"Hello, World\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, \"It is \", this.state.date.toLocaleTimeString(), \".\"), element);\n  }\n\n}\n\nexport default Practice;","map":{"version":3,"sources":["/Users/sarahkryspin/portfolio_website/my-website/src/Practice.js"],"names":["React","Practice","props","Toggle","Component","constructor","state","isToggleOn","id","handleClick","bind","setState","render","UserGreeting","GuestGreeting","Greeting","isLoggedIn","Welcome","name","element","Clock","date","Date","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","toLocaleTimeString"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\nimport React from 'react';\nimport './App.css';\n\n//A Function component accepts properties and returns a React element\n//NOTE: Always start component names with a capital letter\n//NOTE: Props are read-only: never modify props\n//NOTE: Use STATE to modify stuff\n//NOTE: There are three things you should know about setState()\n// 1) Do Not Modify State directly\n//\n// Wrong\n// this.state.comment = 'Hello';\n//\n//correct\n//this.setState({comment: 'Hello'});\n//\n// The only place where you can assign this.state is the constructor\n//\n// ---- States may be updated Asynchronously ---\n//\n// WRONG\n// this.setState({\n//    counter: this.state.counter + this.props.increment,\n// })/\n//\n// CORRECT\n// this.setState((state, props) => ({\n//      counter: state.counter + props.increment\n//}))/\n//\n// ---- State updates are Merged ----\n// When you call setState(), React merges the object you provide into the current state\n//\n//For example, your state may contain several independent variables:\n//  constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     posts: [],\n  //     comments: []\n  //   };\n  // }\n//Then you can update them independently with separate setState() calls:\n//  componentDidMount() {\n  //   fetchPosts().then(response => {\n  //     this.setState({\n  //       posts: response.posts\n  //     });\n  //   });\n  //\n  //   fetchComments().then(response => {\n  //     this.setState({\n  //       comments: response.comments\n  //     });\n  //   });\n  // }\n  // --- The Data Flows Down---\n  // Any state is always owned by some specific component, and any data derived from that state can only affect components \"below\" them in the tree\nfunction Practice(props) {\n  return (\n    <div>\n      <Clock />\n      <Clock />\n      <Clock />\n      <Toggle />\n      <Greeting isLoggedIn={false}/>\n    </div>\n\n  )\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state= {isToggleOn: true, id: 0};\n\n    // This binding is necessary to make 'this' work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(id) {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn,\n      id: state.id + 1\n    }))\n  }\n  // if you refer to a method without () after it, you should bind that method\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n         Count: {this.state.id}\n      </button>\n    );\n  }\n}\n\nfunction UserGreeting(props) {\n  return <h1>Welcome back!</h1>\n}\n\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>\n}\n\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return UserGreeting();\n  }\n  else {\n    return GuestGreeting();\n  }\n}\n\n//A fine component that doesn't modify the properties\n// function Clock(props) {\n//   return (\n//     <div>\n//       <h1>Hello, World</h1>\n//       <h2>It is {props.date.toLocaleTimeString()}.</h2>\n//     </div>\n//   )\n// }\n\nfunction Welcome(props) {\n  return (\n    <h1> Hello, {props.name}</h1>\n  );\n}\n\nconst element = <Welcome name=\"Seb\"/>\n\n\n\n//The Clock, but as a class so we can use state\nclass Clock extends React.Component {\n  //#1 React calls the constructor\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  //#3 Runs after the component output has been rendered to the DOM\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    )\n  }\n\n  //#5 if the Clock component is removed from the DOM, this stops the timer\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  //#4 Every second, tick() is run\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  //#2 React calls render\n  render() {\n    return (\n      <div>\n        <h1>Hello, World</h1>\n        <h2>\n          It is {this.state.date.toLocaleTimeString()}.\n        </h2>\n        {element}\n      </div>\n    )\n  }\n}\n\n\nexport default Practice;\n"]},"metadata":{},"sourceType":"module"}